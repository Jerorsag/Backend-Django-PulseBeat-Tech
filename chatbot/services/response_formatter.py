import logging
import random
from django.conf import settings

logger = logging.getLogger(__name__)

# Respuestas predefinidas para casos comunes
PREDEFINED_RESPONSES = {
    'saludo': [
        "¬°Hola! Soy el asistente virtual de PulseBeat Tech. ¬øEn qu√© puedo ayudarte hoy? üòä",
        "¬°Bienvenido a PulseBeat Tech! Estoy aqu√≠ para ayudarte con nuestros productos de audio. ¬øQu√© est√°s buscando? üéß",
        "¬°Hola! Encantado de atenderte. ¬øC√≥mo puedo asistirte con nuestros productos? üëã"
    ],
    'despedida': [
        "¬°Gracias por contactarnos! Si necesitas algo m√°s, estar√© aqu√≠ para ayudarte. ¬°Hasta pronto! üëã",
        "Ha sido un placer ayudarte. ¬°Vuelve pronto! üòä",
        "¬°Que tengas un excelente d√≠a! Estamos para servirte cuando lo necesites. üéµ"
    ],
    'agradecimiento': [
        "¬°De nada! Estoy aqu√≠ para ayudarte. ¬øHay algo m√°s en lo que pueda asistirte? üòä",
        "Es un placer poder ayudarte. ¬øNecesitas algo m√°s? üéß",
        "No hay de qu√©. ¬øPuedo ayudarte con algo m√°s sobre nuestros productos? üëç"
    ],
    'productos_no_encontrados': [
        "Lo siento, no encontr√© productos que coincidan con tu b√∫squeda. ¬øPuedes ser m√°s espec√≠fico o quieres ver nuestras categor√≠as disponibles? üîç",
        "No tenemos productos que coincidan exactamente con esa descripci√≥n. ¬øTe gustar√≠a ver alternativas similares o explorar nuestro cat√°logo? üìã",
        "No encontr√© resultados para esa consulta. ¬øQuieres que te muestre nuestros productos m√°s populares? üéß"
    ],
    'error_generico': [
        "Lo siento, estoy teniendo problemas para procesar tu solicitud. ¬øPuedes intentarlo de nuevo o preguntar de otra forma? üîÑ",
        "Parece que hay un problema t√©cnico. ¬øPodemos intentar con otra consulta? üõ†Ô∏è",
        "No pude completar esa operaci√≥n. ¬øPuedo ayudarte con algo m√°s mientras tanto? ü§î"
    ]
}

# Sugerencias para diferentes tipos de consultas
CONTEXTUAL_SUGGESTIONS = {
    'busqueda_producto': [
        "Ver m√°s detalles",
        "Comparar modelos",
        "Ver precio",
        "A√±adir al carrito"
    ],
    'precio_producto': [
        "Ver especificaciones",
        "Comparar con otros modelos",
        "Ver opiniones",
        "A√±adir al carrito"
    ],
    'info_producto': [
        "Ver precio",
        "Ver productos similares",
        "Conocer disponibilidad",
        "A√±adir al carrito"
    ],
    'soporte_problema': [
        "Contactar soporte",
        "Ver garant√≠a",
        "Preguntar por reembolso",
        "Buscar soluci√≥n"
    ]
}


def get_predefined_response(type_key):
    """Obtiene una respuesta predefinida aleatoria seg√∫n el tipo"""
    if type_key in PREDEFINED_RESPONSES:
        return random.choice(PREDEFINED_RESPONSES[type_key])
    return None


def get_contextual_suggestions(intent):
    """Obtiene sugerencias contextuales basadas en la intenci√≥n"""
    if intent in CONTEXTUAL_SUGGESTIONS:
        # Obtener todas las sugerencias para esta intenci√≥n
        suggestions = CONTEXTUAL_SUGGESTIONS[intent]
        # Devolver hasta 3 sugerencias aleatorias
        if len(suggestions) > 3:
            return random.sample(suggestions, 3)
        return suggestions

    # Sugerencias por defecto
    return ["Ver productos", "Preguntar precio", "Contactar soporte"]


def format_bot_response(response_text, source, intent=None, entities=None):
    """
    Formatea la respuesta del bot para enviarla al frontend
    Incluye sugerencias contextuales basadas en la intenci√≥n
    """
    # Asegurar que la respuesta termine con emoji si es respuesta de Ollama
    if source == 'ollama' and not any(emoji in response_text for emoji in ['üòä', 'üëç', 'üéß', 'üí∞', 'üì¶']):
        common_emojis = ['üòä', 'üëç', 'üéß', 'üéµ', 'üîä', 'üí∞', 'üì¶', 'üéöÔ∏è', 'üéõÔ∏è']
        response_text += f" {random.choice(common_emojis)}"

    # Obtener sugerencias contextuales
    suggestions = get_contextual_suggestions(intent) if intent else []

    # Estructurar la respuesta para el frontend
    formatted_response = {
        "response": response_text,
        "source": source,
        "suggestions": suggestions
    }

    # Incluir metadatos adicionales si est√°n disponibles
    if intent:
        formatted_response["intent"] = intent

    if entities:
        formatted_response["entities"] = entities

    return formatted_response


def format_product_recommendations(products, query=None):
    """
    Formatea una lista de recomendaciones de productos para mostrar en el chat
    """
    if not products or len(products) == 0:
        return get_predefined_response('productos_no_encontrados')

    intro_phrases = [
        f"He encontrado {len(products)} productos que podr√≠an interesarte:",
        f"Aqu√≠ tienes {len(products)} recomendaciones basadas en tu b√∫squeda:",
        f"Estos son los productos que coinciden con '{query}':" if query else "Estos productos podr√≠an interesarte:"
    ]

    response = f"{random.choice(intro_phrases)}\n\n"

    for i, product in enumerate(products, 1):
        response += f"{i}. **{product.name}** - ${product.price}\n"
        if product.description:
            # Truncar descripci√≥n larga
            desc = product.description[:100] + "..." if len(product.description) > 100 else product.description
            response += f"   {desc}\n"
        if product.category:
            response += f"   Categor√≠a: {product.category}\n"

        # A√±adir espacio entre productos
        if i < len(products):
            response += "\n"

    # A√±adir una pregunta de seguimiento
    followup_questions = [
        "¬øTe gustar√≠a m√°s informaci√≥n sobre alguno de estos productos? üéß",
        "¬øHay alg√∫n producto espec√≠fico que te interese conocer m√°s? üîç",
        "¬øPuedo ayudarte a decidir cu√°l se adapta mejor a tus necesidades? ü§î"
    ]

    response += f"\n{random.choice(followup_questions)}"

    return response


def format_single_product_details(product):
    """
    Formatea los detalles completos de un producto para mostrar en el chat
    """
    if not product:
        return get_predefined_response('productos_no_encontrados')

    response = f"**{product.name}**\n\n"
    response += f"üí∞ **Precio:** ${product.price}\n"

    if product.category:
        response += f"üè∑Ô∏è **Categor√≠a:** {product.category}\n"

    if product.description:
        response += f"\nüìù **Descripci√≥n:**\n{product.description}\n"

    # A√±adir call-to-action
    cta_options = [
        "¬øTe gustar√≠a a√±adir este producto al carrito? üõí",
        "¬øQuieres ver productos similares o tienes alguna pregunta espec√≠fica? üîç",
        "Si est√°s interesado, puedo ayudarte con el proceso de compra. ¬øQu√© te parece? üí≥"
    ]

    response += f"\n{random.choice(cta_options)}"

    return response